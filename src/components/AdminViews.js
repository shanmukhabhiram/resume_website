// import React, { useState, useEffect } from 'react';
// // Import necessary Firebase Realtime Database functions
// // 'getDatabase' is not needed here if you import the instance from firebase-config.js
// import { ref, onValue, remove } from "firebase/database";

// // Import the initialized database instance from your config file
// // *** IMPORTANT: Make sure your firebase-config.js file exists and exports 'database' ***
// import { database } from './firebase-config'; // <-- Adjust this path if necessary

// // *** SECURITY WARNING: This is INSECURE! Replace with Firebase Authentication! ***
// const ADMIN_PASSWORD = "password@123456789";
// // ********************************************************************************

// const AdminViews = () => {
//   const [authenticated, setAuthenticated] = useState(false);
//   const [passwordInput, setPasswordInput] = useState("");
//   const [logs, setLogs] = useState([]); // State to hold logs fetched from Firebase
//   const [loading, setLoading] = useState(true); // State to show loading status

//   // Get a reference to the 'visitorLogs' node in the Realtime Database
//   // This uses the 'database' instance imported from firebase-config.js
//   const logsRef = ref(database, 'visitorLogs');

//   // --- Authentication Logic (INSECURE! Replace with Firebase Auth!) ---
//   const handleLogin = () => {
//     // *** Replace this simple password check with Firebase Authentication sign-in (e.g., email/password, Google Sign-In, etc.) ***
//     if (passwordInput === ADMIN_PASSWORD) {
//       setAuthenticated(true);
//       setLoading(true); // Start loading data *after* successful authentication
//     } else {
//       alert("Incorrect password");
//       setPasswordInput(""); // Clear password field on failure
//     }
//   };
//   // --- End Authentication Logic ---


//   // --- Data Fetching Logic using Firebase Realtime Database Listener ---
//   useEffect(() => {
//     let unsubscribe; // Variable to hold the listener unsubscribe function

//     // Only set up the listener if authenticated
//     if (authenticated) {
//       console.log("User authenticated, setting up Firebase RTDB listener...");
//       // Set up a listener for real-time updates to the 'visitorLogs' path
//       unsubscribe = onValue(logsRef, (snapshot) => {
//         const data = snapshot.val(); // Get the data from the snapshot
//         const loadedLogs = [];

//         if (data) {
//           // Realtime Database stores data as objects. We need to convert it to an array
//           // The keys are the unique IDs generated by the push() method (presumably used to add logs)
//           Object.keys(data).forEach(key => {
//             loadedLogs.push({
//               id: key, // Include the Firebase generated key (useful for potential single-log actions later)
//               ...data[key] // Spread the actual log data
//             });
//           });
//           console.log(`Fetched ${loadedLogs.length} logs from Firebase.`);

//           // Sort logs by timestamp if needed (assuming timestamp is sortable string/number)
//           loadedLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)); // Example: sort by timestamp descending

//         } else {
//            console.log("No logs found in Firebase.");
//         }

//         setLogs(loadedLogs); // Update state with fetched logs
//         setLoading(false); // Data has been loaded (or confirmed empty)

//       }, (error) => {
//         // Handle errors during data fetching
//         console.error("Error fetching logs from Firebase:", error);
//         setLoading(false); // Stop loading on error
//         alert("Failed to load logs. Check console for details.");
//       });
//     } else {
//         // If not authenticated, ensure logs are empty and not loading
//         setLogs([]);
//         setLoading(false);
//         console.log("Not authenticated, listener not active.");
//     }

//     // Clean up the listener when the component unmounts or authentication changes to false
//     return () => {
//       if (unsubscribe) {
//         console.log("Cleaning up Firebase RTDB listener.");
//         unsubscribe();
//       }
//     };

//   }, [authenticated]); // Effect depends on the 'authenticated' state

//   // --- End Data Fetching Logic ---


//   // --- Data Clearing Logic using Firebase Realtime Database ---
//   const handleClearLogs = () => {
//     if (window.confirm("Are you sure you want to delete ALL visitor logs from the Firebase database? This cannot be undone.")) {
//       setLoading(true); // Optionally show loading while deleting
//       // Use Firebase 'remove' to delete the entire 'visitorLogs' node
//       remove(logsRef)
//         .then(() => {
//           console.log("All logs cleared successfully from Firebase!");
//           // The onValue listener will automatically detect the removal and update the 'logs' state
//           // No need to manually clear state or reload the page
//           setLoading(false); // Hide loading after successful deletion (state update from listener handles actual data removal display)
//         })
//         .catch((error) => {
//           console.error("Error clearing logs from Firebase:", error);
//           alert("Failed to clear logs. Check console for details.");
//           setLoading(false); // Hide loading on error
//         });
//     }
//   };
//   // --- End Data Clearing Logic ---


//   // --- Render Logic ---
//   // Show login form if not authenticated
//   if (!authenticated) {
//     return (
//       <div style={{ padding: "40px", textAlign: "center" }}>
//         <h2>Admin Access</h2>
//         {/* SECURITY WARNING: Replace this input/button with Firebase Authentication UI */}
//         <input
//           type="password"
//           placeholder="Enter admin password"
//           value={passwordInput}
//           onChange={(e) => setPasswordInput(e.target.value)}
//           onKeyPress={(e) => { // Allow submitting with Enter key
//               if (e.key === 'Enter') {
//                 handleLogin();
//               }
//             }}
//         />
//         <button onClick={handleLogin} style={{ marginLeft: "10px", padding: "8px 16px", cursor: "pointer" }}>Submit</button>
//         {/* ************************************************************************** */}
//       </div>
//     );
//   }

//   // Show loading state while fetching/deleting data after authentication
//   if (loading) {
//       return (
//         <div style={{ padding: "30px", textAlign: "center" }}>
//           <h2>Loading Visitor Logs...</h2>
//           <p>Fetching data from Firebase Realtime Database.</p>
//         </div>
//       );
//   }

//   // Show logs table or empty message if authenticated and loaded
//   return (
//     <div style={{ padding: "30px" }}>
//       <h2>Visitor Logs ({logs.length} entries)</h2> {/* Display count */}

//       <div style={{ marginBottom: "20px" }}>
//         <button
//           onClick={handleClearLogs}
//           disabled={logs.length === 0} // Disable button if no logs to clear
//           title={logs.length === 0 ? "No logs to clear" : "Clear all visitor logs"} // Add a tooltip
//           style={{
//             padding: "8px 16px",
//             backgroundColor: "#dc3545", // Red color for danger action
//             color: "white",
//             border: "none",
//             borderRadius: "5px",
//             cursor: logs.length === 0 ? "not-allowed" : "pointer", // Change cursor
//             opacity: logs.length === 0 ? 0.6 : 1 // Dim button if disabled
//           }}
//         >
//           Clear All Logs
//         </button>
//       </div>

//       {logs.length === 0 ? (
//         <p>No visitor logs available in the database.</p>
//       ) : (
//         <table border="1" cellPadding="10" cellSpacing="0" style={{ width: "100%", borderCollapse: "collapse", marginTop: "10px" }}>
//           <thead style={{ backgroundColor: "#f8f9fa" }}>
//             <tr>
//               <th>IPv4</th>
//               <th>IPv6</th>
//               <th>Region</th>
//               <th>Country</th>
//               <th>Timezone</th>
//               <th>Region Time</th>
//               <th>India Time</th>
//               <th>Timestamp (UTC)</th>
//             </tr>
//           </thead>
//           <tbody>
//             {/* Map over the logs array fetched from Firebase */}
//             {logs.map((log) => (
//               // Use the unique Firebase key 'log.id' as the key for list rendering
//               <tr key={log.id}>
//                 <td>{log.ipv4 || "N/A"}</td>
//                 <td>{log.ipv6 || "N/A"}</td>
//                 <td>{log.region}</td>
//                 <td>{log.country}</td>
//                 <td>{log.timezone}</td>
//                 <td>{log.regionTime}</td>
//                 <td>{log.indiaTime}</td>
//                 <td>{log.timestamp}</td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       )}
//     </div>
//   );
// };

// export default AdminViews;

import React, { useState, useEffect } from 'react';
import './Portfolio.css'; // Assuming you still need this CSS

// Import necessary Firebase Realtime Database functions
import { ref, onValue, remove } from "firebase/database";
// Import Firebase Authentication functions
import { signInWithEmailAndPassword, onAuthStateChanged, signOut } from "firebase/auth";

// Import the initialized database and auth instances from your config file
// *** IMPORTANT: Make sure your firebase-config.js file exists and exports 'database' AND 'auth' ***
import { database, auth } from './firebase-config'; // <-- Adjust this path if necessary

// Removed the insecure hardcoded password - DO NOT store sensitive credentials here
// const ADMIN_PASSWORD = "password@123456789"; // *** REMOVE THIS LINE ***

const AdminViews = () => {
  // State to hold the authenticated Firebase user object (or null)
  const [user, setUser] = useState(null);

  // States for the login form inputs
  const [emailInput, setEmailInput] = useState("");
  const [passwordInput, setPasswordInput] = useState("");
  const [loginError, setLoginError] = useState(null); // State to display login errors

  // State to hold logs fetched from Firebase
  const [logs, setLogs] = useState([]);
  // State to show loading status (initially true while checking auth state and fetching data)
  const [loading, setLoading] = useState(true);

  // Get a reference to the 'visitorLogs' node in the Realtime Database
  const logsRef = ref(database, 'visitorLogs');


  // --- Firebase Authentication State Listener ---
  // This effect runs once when the component mounts to set up a listener
  // for changes in Firebase Auth state (login, logout, initial status check)
  useEffect(() => {
    console.log("Setting up Firebase Auth state listener...");
    // onAuthStateChanged observes the user's authentication state
    const unsubscribeAuth = onAuthStateChanged(auth, (firebaseUser) => {
      if (firebaseUser) {
        // User is signed in (firebaseUser is not null)
        console.log("Firebase Auth state changed: User is signed in", firebaseUser.uid);
        setUser(firebaseUser); // Set the user state with the authenticated user object
        // Loading state remains true here - the RTDB listener effect will set it to false once data is loaded
        setLoginError(null); // Clear any previous login errors
        // The RTDB listener effect (below) will automatically trigger now because 'user' state has changed
      } else {
        // User is signed out (firebaseUser is null)
        console.log("Firebase Auth state changed: User is signed out.");
        setUser(null); // Clear the user state
        setLogs([]); // Clear logs when signed out for security/cleanliness
        setLoading(false); // Authentication check is complete, stop initial loading
      }
    });

    // Clean up the listener when the component unmounts
    return () => {
        console.log("Cleaning up Firebase Auth state listener.");
        unsubscribeAuth();
    };
  }, [auth]); // Effect depends on the auth instance


  // --- Data Fetching Logic using Firebase Realtime Database Listener ---
  // This effect runs whenever the 'user' state changes (i.e., when Firebase Auth state changes)
  useEffect(() => {
    let unsubscribeRTDB; // Variable to hold the RTDB listener unsubscribe function

    // Only set up the RTDB listener if a user is signed in (user is not null)
    if (user) {
      console.log("Firebase user is present, setting up Realtime Database listener...");
      // Set up a listener for real-time updates to the 'visitorLogs' path
      // This will now work because the security rule '.read': 'auth.uid != null' is satisfied for the signed-in user
      unsubscribeRTDB = onValue(logsRef, (snapshot) => {
        const data = snapshot.val(); // Get the raw data object from the snapshot
        const loadedLogs = [];

        if (data) {
          // Realtime Database stores collections as objects. Convert to an array.
          // Object.keys gets the unique keys generated by push().
          Object.keys(data).forEach(key => {
            loadedLogs.push({
              id: key, // Store the Firebase generated key (useful for identifying individual log entries)
              ...data[key] // Spread the actual log data properties
            });
          });
          console.log(`Fetched ${loadedLogs.length} logs from Firebase RTDB.`);

          // Optional: Sort the logs, e.g., by timestamp descending
          // Ensure your log entries have a 'timestamp' property in a sortable format (like ISO string)
          loadedLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        } else {
           console.log("No logs found in Firebase RTDB.");
        }

        setLogs(loadedLogs); // Update state with fetched logs
        setLoading(false); // Data has been successfully loaded (or confirmed empty)

      }, (error) => {
        // Handle errors during data fetching (like permission denied, though less likely now)
        console.error("Error fetching logs from Firebase RTDB:", error);
        // Display a user-friendly error message
        setLoginError("Failed to load logs. Check browser console for details.");
        setLoading(false); // Stop loading on error
      });
    } else {
        // If no Firebase user is signed in, ensure logs are empty and loading is off
        setLogs([]);
        setLoading(false); // Loading state is already set to false by the auth listener on sign out
        console.log("No Firebase user signed in, RTDB listener not active.");
    }

    // Clean up the RTDB listener when the component unmounts or user signs out
    return () => {
      if (unsubscribeRTDB) {
        console.log("Cleaning up Firebase RTDB listener.");
        unsubscribeRTDB();
      }
    };

  }, [user, logsRef]); // Effect depends on the 'user' state and the 'logsRef' (though logsRef won't change)


  // --- Login Logic using Firebase Authentication ---
  const handleLogin = async (e) => {
      e.preventDefault(); // Prevent default form submission if using a form

      // Basic input validation
      if (!emailInput || !passwordInput) {
          setLoginError("Please enter both email and password.");
          return;
      }

      setLoading(true); // Show loading state during the login attempt
      setLoginError(null); // Clear any previous login errors

      try {
        // *** Use Firebase Authentication signInWithEmailAndPassword ***
        const userCredential = await signInWithEmailAndPassword(auth, emailInput, passwordInput);
        // If successful, userCredential.user contains the authenticated user
        console.log("Signed in successfully with Firebase Auth:", userCredential.user.uid);

        // Input fields can be cleared immediately or after state updates
        setEmailInput("");
        setPasswordInput("");

        // The onAuthStateChanged listener will automatically update the 'user' state,
        // which in turn triggers the RTDB listener to fetch data.
        // We don't need to manually set 'authenticated' state anymore.

      } catch (error) {
        // Handle login errors (e.g., invalid-email, user-not-found, wrong-password)
        console.error("Firebase Login Error:", error.code, error.message);
        // Provide user-friendly error messages based on error code
        switch (error.code) {
            case 'auth/invalid-email':
                setLoginError('Invalid email address format.');
                break;
            case 'auth/user-disabled':
                setLoginError('This user account has been disabled.');
                break;
            case 'auth/user-not-found':
                setLoginError('No user found with this email.');
                break;
            case 'auth/wrong-password':
                setLoginError('Incorrect password.');
                break;
            default:
                setLoginError('Login failed: ' + error.message);
                break;
        }
        setLoading(false); // Stop loading state on login failure
        // The 'user' state remains null
      }
  };
  // --- End Login Logic ---

  // --- Sign Out Logic ---
  const handleSignOut = async () => {
      setLoading(true); // Optionally show loading while signing out
      try {
          await signOut(auth);
          // Sign-out successful.
          console.log("Signed out successfully from Firebase Auth.");
          // The onAuthStateChanged listener will detect this and set user to null.
          // The RTDB listener useEffect will then clean up and clear logs.
      } catch (error) {
          // An error happened during sign out.
          console.error("Error signing out:", error);
          alert("Failed to sign out.");
          setLoading(false); // Stop loading if sign out fails
      }
  };
  // --- End Sign Out Logic ---


  // --- Data Clearing Logic using Firebase Realtime Database ---
  // This function works because the user is authenticated (user is not null)
  // and your security rules grant write permission to authenticated users for the $logId path.
  const handleClearLogs = async () => {
    if (window.confirm("Are you sure you want to delete ALL visitor logs from the Firebase database? This cannot be undone.")) {
      setLoading(true); // Optionally show loading while deleting
      setLoginError(null); // Clear any previous errors

      try {
        // Use Firebase 'remove' to delete the entire 'visitorLogs' node
        await remove(logsRef);
        console.log("All logs cleared successfully from Firebase!");
        // The onValue listener automatically detects the removal and updates the 'logs' state to []
        setLoading(false); // Hide loading after successful deletion (state update handles visual removal)
      } catch (error) {
        console.error("Error clearing logs from Firebase:", error);
        setLoginError("Failed to clear logs. Check console for details.");
        setLoading(false); // Hide loading on error
      }
    }
  };
  // --- End Data Clearing Logic ---


  // --- Render Logic ---

  // Show login form if no Firebase user is signed in (user state is null)
  if (!user) {
    return (
      <div style={{ padding: "40px", textAlign: "center" }}>
        <h2>Admin Access</h2>
        <p>Please log in with your admin credentials.</p>
        {/* Using a form allows submission with Enter key */}
        <form onSubmit={handleLogin} style={{ display: 'inline-block' }}>
            <div>
                <input
                    type="email" // Use email type for better mobile keyboards
                    placeholder="Admin Email"
                    value={emailInput}
                    onChange={(e) => setEmailInput(e.target.value)}
                    disabled={loading} // Disable inputs while authentication is in progress
                    style={{ marginBottom: '10px', padding: '8px', minWidth: '200px' }}
                    required // Make fields required
                />
            </div>
            <div>
                <input
                    type="password"
                    placeholder="Admin Password"
                    value={passwordInput}
                    onChange={(e) => setPasswordInput(e.target.value)}
                    disabled={loading} // Disable inputs while authentication is in progress
                    style={{ marginBottom: '10px', padding: '8px', minWidth: '200px' }}
                    required // Make fields required
                />
            </div>
            <button type="submit" disabled={loading} style={{ padding: '8px 16px', cursor: loading ? 'wait' : 'pointer' }}>
                {loading ? 'Logging In...' : 'Login'} {/* Show loading text on button */}
            </button>
        </form>

        {/* Display login errors */}
        {loginError && <p style={{ color: 'red', marginTop: '15px' }}>{loginError}</p>}

        {/* Show initial loading state before onAuthStateChanged resolves */}
        {!loginError && loading && <p style={{ marginTop: '15px' }}>Checking authentication status...</p>}
      </div>
    );
  }

  // Show loading state while fetching/deleting data *after* authentication
  if (loading) {
      return (
        <div style={{ padding: "30px", textAlign: "center" }}>
          <h2>Loading Visitor Logs...</h2>
          <p>Fetching data from Firebase Realtime Database.</p>
          {/* Display errors that might occur *after* successful login */}
          {loginError && <p style={{ color: 'red', marginTop: '15px' }}>{loginError}</p>}
        </div>
      );
  }

  // Show logs table or empty message if authenticated and data is loaded
  return (
    <div style={{ padding: "30px" }}>
      <h2>Visitor Logs ({logs.length} entries)</h2> {/* Display count */}

      <div style={{ marginBottom: "20px", display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        {/* Sign Out Button */}
         <button
            onClick={handleSignOut}
            disabled={loading} // Disable while signing out
            style={{
                padding: "8px 16px",
                backgroundColor: "#ffc107", // Warning color
                color: "black",
                border: "none",
                borderRadius: "5px",
                cursor: loading ? 'wait' : 'pointer',
                opacity: loading ? 0.6 : 1
            }}
         >
            {loading ? 'Signing Out...' : 'Sign Out'}
         </button>

        {/* Clear Logs Button */}
        <button
          onClick={handleClearLogs}
          disabled={logs.length === 0 || loading} // Disable if no logs or loading
          title={logs.length === 0 ? "No logs to clear" : "Clear all visitor logs"} // Add a tooltip
          style={{
            padding: "8px 16px",
            backgroundColor: "#dc3545", // Red color for danger action
            color: "white",
            border: "none",
            borderRadius: "5px",
            cursor: (logs.length === 0 || loading) ? "not-allowed" : "pointer", // Change cursor
            opacity: (logs.length === 0 || loading) ? 0.6 : 1 // Dim button if disabled
          }}
        >
          {loading ? 'Clearing...' : 'Clear All Logs'} {/* Show loading text */}
        </button>
      </div>

      {loginError && <p style={{ color: 'red', marginTop: '15px' }}>{loginError}</p>} {/* Display errors below buttons */}


      {logs.length === 0 ? (
        <p>No visitor logs available in the database.</p>
      ) : (
        <table border="1" cellPadding="10" cellSpacing="0" style={{ width: "100%", borderCollapse: "collapse", marginTop: "10px" }}>
          <thead style={{ backgroundColor: "#f8f9fa" }}>
            <tr>
              <th>IPv4</th>
              <th>IPv6</th>
              <th>Region</th>
              <th>Country</th>
              <th>Timezone</th>
              <th>Region Time</th>
              <th>India Time</th>
              <th>Timestamp (UTC)</th>
            </tr>
          </thead>
          <tbody>
            {/* Map over the logs array fetched from Firebase */}
            {logs.map((log) => (
              // Use the unique Firebase key 'log.id' as the key for list rendering
              <tr key={log.id}>
                <td>{log.ipv4 || "N/A"}</td>
                <td>{log.ipv6 || "N/A"}</td>
                <td>{log.region}</td>
                <td>{log.country}</td>
                <td>{log.timezone}</td>
                <td>{log.regionTime}</td>
                <td>{log.indiaTime}</td>
                <td>{log.timestamp}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default AdminViews;